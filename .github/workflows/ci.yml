name: CI
on:
  push:
    branches:
      - v7
  pull_request:

env:
  SEQ_DB: sequelize_test
  SEQ_USER: sequelize_test
  SEQ_PW: sequelize_test

# This configuration cancels previous runs if a new run is started on the same PR. Only one run at a time per PR.
# This does not affect pushes to the v7 branch itself, only PRs.
# from https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-a-fallback-value
concurrency:
  group: ${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  install-and-build:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 18]
    name: Upload install and build artifact (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - name: Install dependencies and build sequelize
        run: yarn install --frozen-lockfile
      - name: Compress artifact
        run: tar -cf install-build-node-${{ matrix.node-version }}.tar ./lib ./node_modules ./types
      - uses: actions/upload-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
          path: install-build-node-${{ matrix.node-version }}.tar
          retention-days: 1
  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: install-and-build
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-18
      - name: Extract artifact
        run: tar -xf install-build-node-18.tar
      - run: yarn lint-no-fix
  unit-test:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 18]
    name: Unit test all dialects (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Unit tests (mariadb)
        run: yarn test-unit-mariadb
      - name: Unit tests (mysql)
        run: yarn test-unit-mysql
      - name: Unit tests (postgres)
        run: yarn test-unit-postgres
      - name: Unit tests (sqlite)
        run: yarn test-unit-sqlite
      - name: Unit tests (mssql)
        run: yarn test-unit-mssql
      - name: Unit tests (db2)
        run: yarn test-unit-db2
      - name: Unit tests (ibmi)
        run: yarn test-unit-ibmi
      - name: Unit tests (snowflake)
        run: yarn test-unit-snowflake
  docs:
    name: Generate TypeDoc
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-18
      - name: Extract artifact
        run: tar -xf install-build-node-18.tar
      - run: yarn docs
  test-typings:
    strategy:
      fail-fast: false
      matrix:
        ts-version: ["4.6", "4.7", "4.8", "4.9"]
    name: TS Typings (${{ matrix.ts-version }})
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-18
      - name: Extract artifact
        run: tar -xf install-build-node-18.tar
      # This step uses npm instead of yarn to minimize the time needed. See #14171
      - name: Install TypeScript
        run: npm install --no-save --no-audit typescript@~${{ matrix.ts-version }}
      - name: Typing Tests
        run: yarn test-typings
  test-sqlite:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 18]
    name: sqlite (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    env:
      DIALECT: sqlite
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Integration Tests
        run: yarn test-integration
  test-oldest-latest:
    strategy:
      fail-fast: false
      matrix:
        node-version: [14, 18]
        database-version: [oldest, latest]
        dialect: [mysql, mariadb, mssql, postgres, db2]
        include:
          - dialect: postgres
            minify-aliases: true
          - dialect: postgres
            minify-aliases: false
          - dialect: postgres
            native: true
          - dialect: postgres
            native: false
    name: ${{ matrix.dialect }} ${{ matrix.database-version }}${{ matrix.dialect == 'postgres' && matrix.native && ' (native)' || '' }} (Node ${{ matrix.node-version }})${{ matrix.dialect == 'postgres' && matrix.minify-aliases && ' (minified aliases)' || '' }}
    runs-on: ubuntu-latest
    needs: [ unit-test, test-typings ]
    env:
      DIALECT: ${{ matrix.dialect == 'postgres' && matrix.native && 'postgres-native' || matrix.dialect }}
      SEQ_PG_MINIFY_ALIASES: ${{ matrix.dialect == 'postgres' && matrix.minify-aliases && '1' || '' }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-${{ matrix.node-version }}
      - name: Extract artifact
        run: tar -xf install-build-node-${{ matrix.node-version }}.tar
      - name: Install pg-native (Node 14)
        run: yarn add pg-native --ignore-engines
        if: matrix.dialect == 'postgres' && matrix.native && matrix.node-version == 14
      # This step uses npm instead of yarn to minimize the time needed. See #14171
      - name: Install pg-native (Node 18)
        run: npm install --no-save --no-audit pg-native
        if: matrix.dialect == 'postgres' && matrix.native && matrix.node-version == 18
      - run: yarn start-${{ matrix.dialect }}-${{ matrix.database-version }}
      - name: Integration Tests
        run: yarn test-integration
  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      [
        docs,
        test-sqlite,
        test-oldest-latest
      ]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/v6' || github.ref == 'refs/heads/v7')
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 18.x
          cache: yarn
      - uses: actions/download-artifact@v3
        with:
          name: install-build-artifact-node-18
      - name: Extract artifact
        run: tar -xf install-build-node-18.tar
      - run: yarn semantic-release
      - id: sequelize
        uses: sdepold/github-action-get-latest-release@master
        with:
          repository: sequelize/sequelize
      - name: Notify channels
        run: |
          curl -XPOST -u "sdepold:${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" https://api.github.com/repos/sequelize/sequelize/dispatches --data '{"event_type":"Release notifier","client_payload":{"release-id": ${{ steps.sequelize.outputs.id }}}}'
      - name: Notify docs repo
        run: |
          curl -XPOST -u "sdepold:${{ secrets.GH_TOKEN }}" -H "Accept: application/vnd.github.v3+json" -H "Content-Type: application/json" https://api.github.com/repos/sequelize/website/dispatches --data '{"event_type":"Build website"}'
